#ifndef GPUTYPES_GPUTYPES_H
#define GPUTYPES_GPUTYPES_H

#ifndef __has_feature
#define __has_feature(x) 0
#endif

#if defined(__cplusplus) && __has_feature(cxx_relaxed_constexpr)
#define GPUTYPES_CONSTEXPR constexpr
#else
#define GPUTYPES_CONSTEXPR static inline
#endif

typedef enum GPUType {
    GPUTYPE_NONE = 0,

    GPUTYPE_BIT_UNSIGNED = 0x00008000,
    GPUTYPE_BIT_VEC2 = 0x01020000,
    GPUTYPE_BIT_VEC3 = 0x01030000,
    GPUTYPE_BIT_VEC4 = 0x01040000,
    GPUTYPE_BIT_MAT2 = 0x02020000,
    GPUTYPE_BIT_MAT3 = 0x03030000,
    GPUTYPE_BIT_MAT4 = 0x04040000,
    GPUTYPE_BIT_MAT2x3 = 0x02030000,
    GPUTYPE_BIT_MAT2x4 = 0x02040000,
    GPUTYPE_BIT_MAT3x2 = 0x03020000,
    GPUTYPE_BIT_MAT3x4 = 0x03040000,
    GPUTYPE_BIT_MAT4x2 = 0x04020000,
    GPUTYPE_BIT_MAT4x3 = 0x04030000,
    GPUTYPE_MASK_BASE = 0x0000ffff,
    GPUTYPE_MASK_VEC = 0xffff0000,
    GPUTYPE_MASK_ROWS = 0x00ff0000,
    GPUTYPE_MASK_COLS = 0xff000000,
    GPUTYPE_SHIFT_ROWS = 16,
    GPUTYPE_SHIFT_COLS = 24,

    GPUTYPE_FLOAT = 1,
    GPUTYPE_DOUBLE = 2,
    GPUTYPE_HALF = 3,
    GPUTYPE_BOOL = 4,
    GPUTYPE_BYTE = 5,
    GPUTYPE_SHORT = 6,
    GPUTYPE_INT = 7,
    GPUTYPE_UNSIGNED_BYTE = GPUTYPE_BYTE | GPUTYPE_BIT_UNSIGNED,
    GPUTYPE_UNSIGNED_SHORT = GPUTYPE_SHORT | GPUTYPE_BIT_UNSIGNED,
    GPUTYPE_UNSIGNED_INT = GPUTYPE_INT | GPUTYPE_BIT_UNSIGNED,

    GPUTYPE_FLOAT_VEC2 = GPUTYPE_FLOAT | GPUTYPE_BIT_VEC2,
    GPUTYPE_FLOAT_VEC3 = GPUTYPE_FLOAT | GPUTYPE_BIT_VEC3,
    GPUTYPE_FLOAT_VEC4 = GPUTYPE_FLOAT | GPUTYPE_BIT_VEC4,

    GPUTYPE_FLOAT_MAT2 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT2,
    GPUTYPE_FLOAT_MAT3 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT3,
    GPUTYPE_FLOAT_MAT4 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT4,
    GPUTYPE_FLOAT_MAT2x3 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT2x3,
    GPUTYPE_FLOAT_MAT2x4 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT2x4,
    GPUTYPE_FLOAT_MAT3x2 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT3x2,
    GPUTYPE_FLOAT_MAT3x4 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT3x4,
    GPUTYPE_FLOAT_MAT4x2 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT4x2,
    GPUTYPE_FLOAT_MAT4x3 = GPUTYPE_FLOAT | GPUTYPE_BIT_MAT4x3,

    GPUTYPE_DOUBLE_VEC2 = GPUTYPE_DOUBLE | GPUTYPE_BIT_VEC2,
    GPUTYPE_DOUBLE_VEC3 = GPUTYPE_DOUBLE | GPUTYPE_BIT_VEC3,
    GPUTYPE_DOUBLE_VEC4 = GPUTYPE_DOUBLE | GPUTYPE_BIT_VEC4,

    GPUTYPE_DOUBLE_MAT2 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT2,
    GPUTYPE_DOUBLE_MAT3 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT3,
    GPUTYPE_DOUBLE_MAT4 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT4,
    GPUTYPE_DOUBLE_MAT2x3 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT2x3,
    GPUTYPE_DOUBLE_MAT2x4 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT2x4,
    GPUTYPE_DOUBLE_MAT3x2 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT3x2,
    GPUTYPE_DOUBLE_MAT3x4 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT3x4,
    GPUTYPE_DOUBLE_MAT4x2 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT4x2,
    GPUTYPE_DOUBLE_MAT4x3 = GPUTYPE_DOUBLE | GPUTYPE_BIT_MAT4x3,

    GPUTYPE_HALF_VEC2 = GPUTYPE_HALF | GPUTYPE_BIT_VEC2,
    GPUTYPE_HALF_VEC3 = GPUTYPE_HALF | GPUTYPE_BIT_VEC3,
    GPUTYPE_HALF_VEC4 = GPUTYPE_HALF | GPUTYPE_BIT_VEC4,

    GPUTYPE_HALF_MAT2 = GPUTYPE_HALF | GPUTYPE_BIT_MAT2,
    GPUTYPE_HALF_MAT3 = GPUTYPE_HALF | GPUTYPE_BIT_MAT3,
    GPUTYPE_HALF_MAT4 = GPUTYPE_HALF | GPUTYPE_BIT_MAT4,
    GPUTYPE_HALF_MAT2x3 = GPUTYPE_HALF | GPUTYPE_BIT_MAT2x3,
    GPUTYPE_HALF_MAT2x4 = GPUTYPE_HALF | GPUTYPE_BIT_MAT2x4,
    GPUTYPE_HALF_MAT3x2 = GPUTYPE_HALF | GPUTYPE_BIT_MAT3x2,
    GPUTYPE_HALF_MAT3x4 = GPUTYPE_HALF | GPUTYPE_BIT_MAT3x4,
    GPUTYPE_HALF_MAT4x2 = GPUTYPE_HALF | GPUTYPE_BIT_MAT4x2,
    GPUTYPE_HALF_MAT4x3 = GPUTYPE_HALF | GPUTYPE_BIT_MAT4x3,

    GPUTYPE_BOOL_VEC2 = GPUTYPE_BOOL | GPUTYPE_BIT_VEC2,
    GPUTYPE_BOOL_VEC3 = GPUTYPE_BOOL | GPUTYPE_BIT_VEC3,
    GPUTYPE_BOOL_VEC4 = GPUTYPE_BOOL | GPUTYPE_BIT_VEC4,

    GPUTYPE_BYTE_VEC2 = GPUTYPE_BYTE | GPUTYPE_BIT_VEC2,
    GPUTYPE_BYTE_VEC3 = GPUTYPE_BYTE | GPUTYPE_BIT_VEC3,
    GPUTYPE_BYTE_VEC4 = GPUTYPE_BYTE | GPUTYPE_BIT_VEC4,

    GPUTYPE_SHORT_VEC2 = GPUTYPE_SHORT | GPUTYPE_BIT_VEC2,
    GPUTYPE_SHORT_VEC3 = GPUTYPE_SHORT | GPUTYPE_BIT_VEC3,
    GPUTYPE_SHORT_VEC4 = GPUTYPE_SHORT | GPUTYPE_BIT_VEC4,

    GPUTYPE_INT_VEC2 = GPUTYPE_INT | GPUTYPE_BIT_VEC2,
    GPUTYPE_INT_VEC3 = GPUTYPE_INT | GPUTYPE_BIT_VEC3,
    GPUTYPE_INT_VEC4 = GPUTYPE_INT | GPUTYPE_BIT_VEC4,

    GPUTYPE_UNSIGNED_BYTE_VEC2 = GPUTYPE_UNSIGNED_BYTE | GPUTYPE_BIT_VEC2,
    GPUTYPE_UNSIGNED_BYTE_VEC3 = GPUTYPE_UNSIGNED_BYTE | GPUTYPE_BIT_VEC3,
    GPUTYPE_UNSIGNED_BYTE_VEC4 = GPUTYPE_UNSIGNED_BYTE | GPUTYPE_BIT_VEC4,

    GPUTYPE_UNSIGNED_SHORT_VEC2 = GPUTYPE_UNSIGNED_SHORT | GPUTYPE_BIT_VEC2,
    GPUTYPE_UNSIGNED_SHORT_VEC3 = GPUTYPE_UNSIGNED_SHORT | GPUTYPE_BIT_VEC3,
    GPUTYPE_UNSIGNED_SHORT_VEC4 = GPUTYPE_UNSIGNED_SHORT | GPUTYPE_BIT_VEC4,

    GPUTYPE_UNSIGNED_INT_VEC2 = GPUTYPE_UNSIGNED_INT | GPUTYPE_BIT_VEC2,
    GPUTYPE_UNSIGNED_INT_VEC3 = GPUTYPE_UNSIGNED_INT | GPUTYPE_BIT_VEC3,
    GPUTYPE_UNSIGNED_INT_VEC4 = GPUTYPE_UNSIGNED_INT | GPUTYPE_BIT_VEC4,

} GPUType;

GPUTYPES_CONSTEXPR const char *gputype_typeName(GPUType t) {
    switch (t) {
    case GPUTYPE_NONE:
        return "GPUTYPE_NONE";
    case GPUTYPE_FLOAT:
        return "GPUTYPE_FLOAT";
    case GPUTYPE_DOUBLE:
        return "GPUTYPE_DOUBLE";
    case GPUTYPE_HALF:
        return "GPUTYPE_HALF";
    case GPUTYPE_BOOL:
        return "GPUTYPE_BOOL";
    case GPUTYPE_BYTE:
        return "GPUTYPE_BYTE";
    case GPUTYPE_SHORT:
        return "GPUTYPE_SHORT";
    case GPUTYPE_INT:
        return "GPUTYPE_INT";
    case GPUTYPE_UNSIGNED_BYTE:
        return "GPUTYPE_UNSIGNED_BYTE";
    case GPUTYPE_UNSIGNED_SHORT:
        return "GPUTYPE_UNSIGNED_SHORT";
    case GPUTYPE_UNSIGNED_INT:
        return "GPUTYPE_UNSIGNED_INT";

    case GPUTYPE_FLOAT_VEC2:
        return "GPUTYPE_FLOAT_VEC2";
    case GPUTYPE_FLOAT_VEC3:
        return "GPUTYPE_FLOAT_VEC3";
    case GPUTYPE_FLOAT_VEC4:
        return "GPUTYPE_FLOAT_VEC4";

    case GPUTYPE_FLOAT_MAT2:
        return "GPUTYPE_FLOAT_MAT2";
    case GPUTYPE_FLOAT_MAT3:
        return "GPUTYPE_FLOAT_MAT3";
    case GPUTYPE_FLOAT_MAT4:
        return "GPUTYPE_FLOAT_MAT4";
    case GPUTYPE_FLOAT_MAT2x3:
        return "GPUTYPE_FLOAT_MAT2x3";
    case GPUTYPE_FLOAT_MAT2x4:
        return "GPUTYPE_FLOAT_MAT2x4";
    case GPUTYPE_FLOAT_MAT3x2:
        return "GPUTYPE_FLOAT_MAT3x2";
    case GPUTYPE_FLOAT_MAT3x4:
        return "GPUTYPE_FLOAT_MAT3x4";
    case GPUTYPE_FLOAT_MAT4x2:
        return "GPUTYPE_FLOAT_MAT4x2";
    case GPUTYPE_FLOAT_MAT4x3:
        return "GPUTYPE_FLOAT_MAT4x3";

    case GPUTYPE_DOUBLE_VEC2:
        return "GPUTYPE_DOUBLE_VEC2";
    case GPUTYPE_DOUBLE_VEC3:
        return "GPUTYPE_DOUBLE_VEC3";
    case GPUTYPE_DOUBLE_VEC4:
        return "GPUTYPE_DOUBLE_VEC4";

    case GPUTYPE_DOUBLE_MAT2:
        return "GPUTYPE_DOUBLE_MAT2";
    case GPUTYPE_DOUBLE_MAT3:
        return "GPUTYPE_DOUBLE_MAT3";
    case GPUTYPE_DOUBLE_MAT4:
        return "GPUTYPE_DOUBLE_MAT4";
    case GPUTYPE_DOUBLE_MAT2x3:
        return "GPUTYPE_DOUBLE_MAT2x3";
    case GPUTYPE_DOUBLE_MAT2x4:
        return "GPUTYPE_DOUBLE_MAT2x4";
    case GPUTYPE_DOUBLE_MAT3x2:
        return "GPUTYPE_DOUBLE_MAT3x2";
    case GPUTYPE_DOUBLE_MAT3x4:
        return "GPUTYPE_DOUBLE_MAT3x4";
    case GPUTYPE_DOUBLE_MAT4x2:
        return "GPUTYPE_DOUBLE_MAT4x2";
    case GPUTYPE_DOUBLE_MAT4x3:
        return "GPUTYPE_DOUBLE_MAT4x3";

    case GPUTYPE_HALF_VEC2:
        return "GPUTYPE_HALF_VEC2";
    case GPUTYPE_HALF_VEC3:
        return "GPUTYPE_HALF_VEC3";
    case GPUTYPE_HALF_VEC4:
        return "GPUTYPE_HALF_VEC4";

    case GPUTYPE_HALF_MAT2:
        return "GPUTYPE_HALF_MAT2";
    case GPUTYPE_HALF_MAT3:
        return "GPUTYPE_HALF_MAT3";
    case GPUTYPE_HALF_MAT4:
        return "GPUTYPE_HALF_MAT4";
    case GPUTYPE_HALF_MAT2x3:
        return "GPUTYPE_HALF_MAT2x3";
    case GPUTYPE_HALF_MAT2x4:
        return "GPUTYPE_HALF_MAT2x4";
    case GPUTYPE_HALF_MAT3x2:
        return "GPUTYPE_HALF_MAT3x2";
    case GPUTYPE_HALF_MAT3x4:
        return "GPUTYPE_HALF_MAT3x4";
    case GPUTYPE_HALF_MAT4x2:
        return "GPUTYPE_HALF_MAT4x2";
    case GPUTYPE_HALF_MAT4x3:
        return "GPUTYPE_HALF_MAT4x3";

    case GPUTYPE_BOOL_VEC2:
        return "GPUTYPE_BOOL_VEC2";
    case GPUTYPE_BOOL_VEC3:
        return "GPUTYPE_BOOL_VEC3";
    case GPUTYPE_BOOL_VEC4:
        return "GPUTYPE_BOOL_VEC4";

    case GPUTYPE_BYTE_VEC2:
        return "GPUTYPE_BYTE_VEC2";
    case GPUTYPE_BYTE_VEC3:
        return "GPUTYPE_BYTE_VEC3";
    case GPUTYPE_BYTE_VEC4:
        return "GPUTYPE_BYTE_VEC4";

    case GPUTYPE_SHORT_VEC2:
        return "GPUTYPE_SHORT_VEC2";
    case GPUTYPE_SHORT_VEC3:
        return "GPUTYPE_SHORT_VEC3";
    case GPUTYPE_SHORT_VEC4:
        return "GPUTYPE_SHORT_VEC4";

    case GPUTYPE_INT_VEC2:
        return "GPUTYPE_INT_VEC2";
    case GPUTYPE_INT_VEC3:
        return "GPUTYPE_INT_VEC3";
    case GPUTYPE_INT_VEC4:
        return "GPUTYPE_INT_VEC4";

    case GPUTYPE_UNSIGNED_BYTE_VEC2:
        return "GPUTYPE_UNSIGNED_BYTE_VEC2";
    case GPUTYPE_UNSIGNED_BYTE_VEC3:
        return "GPUTYPE_UNSIGNED_BYTE_VEC3";
    case GPUTYPE_UNSIGNED_BYTE_VEC4:
        return "GPUTYPE_UNSIGNED_BYTE_VEC4";

    case GPUTYPE_UNSIGNED_SHORT_VEC2:
        return "GPUTYPE_UNSIGNED_SHORT_VEC2";
    case GPUTYPE_UNSIGNED_SHORT_VEC3:
        return "GPUTYPE_UNSIGNED_SHORT_VEC3";
    case GPUTYPE_UNSIGNED_SHORT_VEC4:
        return "GPUTYPE_UNSIGNED_SHORT_VEC4";

    case GPUTYPE_UNSIGNED_INT_VEC2:
        return "GPUTYPE_UNSIGNED_INT_VEC2";
    case GPUTYPE_UNSIGNED_INT_VEC3:
        return "GPUTYPE_UNSIGNED_INT_VEC3";
    case GPUTYPE_UNSIGNED_INT_VEC4:
        return "GPUTYPE_UNSIGNED_INT_VEC4";

    default:
        break;
    }
    return "no-such-type";
}

GPUTYPES_CONSTEXPR int gputype_typeElements(GPUType t) {
    if (t == GPUTYPE_NONE)
        return 0;
    if (t <= GPUTYPE_MASK_BASE)
        return 1;
    return ((t >> GPUTYPE_SHIFT_ROWS) & 255) *
           ((t >> GPUTYPE_SHIFT_COLS) & 255);
}

GPUTYPES_CONSTEXPR int gputype_sizeofBase(GPUType type) {
    switch (type) {

    case GPUTYPE_FLOAT:
        return 4;
    case GPUTYPE_INT:
        return 4;

    case GPUTYPE_UNSIGNED_INT:
        return 4;

    case GPUTYPE_SHORT:
        return 2;

    case GPUTYPE_UNSIGNED_SHORT:
        return 2;

    case GPUTYPE_BYTE:
        return 1;

    case GPUTYPE_UNSIGNED_BYTE:
        return 1;

    case GPUTYPE_DOUBLE:
        return 8;

    case GPUTYPE_HALF:
        return 2;

    case GPUTYPE_BOOL:
        return 1;
    default:
        break;
    }
    return 0;
}

GPUTYPES_CONSTEXPR GPUType gputype_typeBase(GPUType t) {
    return (GPUType)(t & GPUTYPE_MASK_BASE);
}

GPUTYPES_CONSTEXPR int gputype_sizeof(GPUType t) {
    return gputype_sizeofBase(gputype_typeBase(t)) * gputype_typeElements(t);
}

#endif
